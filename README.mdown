Isotope (leak free)
========

**Isotope** is a cool jQuery plugin that does lots of fancy arrangement, filtering and sorting. Unfortunately, it also leaks memory like a fucking sieve, and its author has expressed a complete lack of interest in remediating this situation despite knowing how simple it is to fix, so here's a fork for people who don't want their users' browsers to crash for the sake of eye candy.

The Problem
========

In a word: *Expandos*. Despite being the scourge of all web programming for many a year, they're occasionally necessary in cases where you need persistent data to be attached to a specific DOM object. **Isotope** certainly requires this, so it keeps track of lists of *atoms*--which are themselves DOM objects.

Where **Isotope** goes horribly wrong is in assigning the results of **jQuery** selector operations (specifically `not` and `filter`) *directly* to these expando lists. Every **jQuery** selector returns a `prevObject` attribute, which contains the *complete* result set of the previous selector--including the DOM objects selected--thusly supplying the magic necessary for its amazingly popular chaining mechanism to work.

One of many examples littered throughout the **Isotope** code would look like:

```javascript
this.$allAtoms = this.$allAtoms.not( $content );
```

So let's think about what that means for a minute. We've got ourselves an Isotope-ified DOM object--`this` and it's got some expando data attached to it called `$allAtoms`. We're running `$allAtoms` through `.not` in order to filter something undesireable out of it and re-assigning the result of that directly to `$allAtoms`.

The result of that `not` contains a `prevObject` attribute, which contains the result of **jQuery's** selection efforts. Those will be child elements of `this` in every case, so `this` will be retaining references to those elements even after they've been removed.

But it gets worse because these assignments happen constantly and these cyclical references snowball. After just a few Isotope insertion/removal cycles, you'll have

```javascript
this.$allAtoms.prevObject.prevObject.prevObject.prevObject
```

and so on and so forth. 

Since all of those `prevObject`s have references to every single DOM element that's *ever* been inserted into the **Isotope** container they will *never* be freed. The more you use **Isotope**, the more shit you leave floating around in browser memory. The more shit you leave floating around in browser memory, the slower your page runs. You'll probably crash the whole goddamned browser, too, but hey, why would a grossly overpaid **Twitter** engineer care about that? Computers have all the memory in the world these days; fuck responsible coding and gimme my $50.

The Solution
======== 

The fix is simple: **STOP ASSIGNING JQUERY SELECTOR RESULTS TO EXPANDOS!** Really. That's all it takes. It's not even a deeply guarded industry secret or anything. Here's a really long, really thorough paper about it from IBM: http://www.ibm.com/developerworks/web/library/wa-memleak/

* * *

Original work Copyright (c) 2011-2012 David DeSandro / Metafizzy LLC
